using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Net;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace winforms_src;

public partial class Form1 : Form
{
    private List<DownloadItem> downloadItems = new List<DownloadItem>();
    private string logDirectory;
    private string currentLogFilePath = string.Empty;
    private DateTime currentLogDate;
    public Form1()
    {
        InitializeComponent();
        logDirectory = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "logs");
        Directory.CreateDirectory(logDirectory);
        UpdateLogFilePath();
    }
    private void UpdateLogFilePath()
    {
        currentLogDate = DateTime.Today;
        string logFileName = $"download_{currentLogDate:yyyy-MM-dd}.log";
        currentLogFilePath = Path.Combine(logDirectory, logFileName);
    }
    private void btnSelectFolder_Click(object sender, EventArgs e)
    {
        using (FolderBrowserDialog folderDialog = new FolderBrowserDialog())
        {
            if (folderDialog.ShowDialog() == DialogResult.OK)
            {
                txtFolder.Text = folderDialog.SelectedPath;
            }
        }
    }
    private void btnAddUrl_Click(object sender, EventArgs e)
    {
        if (!string.IsNullOrEmpty(txtUrl.Text))
        {
            AddDownloadItem(txtUrl.Text);
            txtUrl.Clear();
        }
    }
    private void AddDownloadItem(string url)
    {
        if (downloadItems.Any(x => x.Url == url))
        {
            MessageBox.Show("이미 추가된 URL입니다.");
            return;
        }
        DownloadItem item = new DownloadItem(url, txtFolder.Text);
        downloadItems.Add(item);
        flowLayoutPanel1.Controls.Add(item.Panel);
        LogToFile(url, "다운로드 추가");
    }
    private void btnDownload_Click(object sender, EventArgs e)
    {
        if (downloadItems.Count == 0 || string.IsNullOrEmpty(txtFolder.Text))
        {
            MessageBox.Show("URL과 다운로드 폴더를 지정해주세요.");
            return;
        }
        foreach (var item in downloadItems)
        {
            StartDownload(item);
        }
    }
    private void StartDownload(DownloadItem item)
    {
        Task.Run(() => DownloadFileAsync(item));
    }
    private async Task DownloadFileAsync(DownloadItem item)
    {
        long totalBytesReceived = 0;
        long totalFileSize = 0;
        int numberOfParts = 4;  // Number of parts to divide the file into for parallel downloading
        if (File.Exists(item.DownloadPath))
        {
            totalBytesReceived = new FileInfo(item.DownloadPath).Length;
        }
        using (HttpClient client = new HttpClient())
        {
            try
            {
                // Get the total file size
                using (HttpResponseMessage response = await client.SendAsync(new HttpRequestMessage(HttpMethod.Head, item.Url)))
                {
                    response.EnsureSuccessStatusCode();
                    totalFileSize = response.Content.Headers.ContentLength ?? 0;
                    item.TotalFileSize = totalFileSize;
                }
                if (totalBytesReceived >= totalFileSize)
                {
                    Invoke(new Action(() => item.UpdateStatus("파일이 이미 완전히 다운로드되었습니다.")));
                    LogToFile(item.Url, "파일이 이미 완전히 다운로드되었습니다.");
                    return;
                }

                // Calculate part size
                long partSize = totalFileSize / numberOfParts;
                List<Task> downloadTasks = new List<Task>();
                // Download each part in parallel
                for (int i = 0; i < numberOfParts; i++)
                {
                    long start = i * partSize;
                    long end = (i == numberOfParts - 1) ? totalFileSize : (start + partSize - 1);

                        downloadTasks.Add(DownloadPartAsync(item, start, end, i));
                }
                await Task.WhenAll(downloadTasks);
                
                // Combine parts into one file
                CombineParts(item, numberOfParts);

                Invoke(new Action(() => item.UpdateStatus("다운로드 완료")));
                LogToFile(item.Url, "다운로드 완료");
            }
            catch (Exception ex)
            {
                Invoke(new Action(() => item.UpdateStatus("다운로드 오류: " + ex.Message)));
                LogToFile(item.Url, "다운로드 오류: " + ex.Message);
            }
        }
    }

    private async Task DownloadPartAsync(DownloadItem item, long start, long end, int partIndex)
    {
        using (HttpClient client = new HttpClient())
        {
            HttpRequestMessage request = new HttpRequestMessage(HttpMethod.Get, item.Url);
            request.Headers.Range = new System.Net.Http.Headers.RangeHeaderValue(start, end);
            using (HttpResponseMessage response = await client.SendAsync(request, HttpCompletionOption.ResponseHeadersRead))
            {
                response.EnsureSuccessStatusCode();
                using (Stream responseStream = await response.Content.ReadAsStreamAsync())
                {
                    string tempFilePath = $"{item.DownloadPath}.part{partIndex}";

                    // Check if the part file already exists and its size
                    long existingBytes = 0;
                    if (File.Exists(tempFilePath))
                    {
                        existingBytes = new FileInfo(tempFilePath).Length;
                        start += existingBytes;
                        if (start >= end)
                        {
                            return;
                        }
                    }

                    using (FileStream fileStream = new FileStream(tempFilePath, FileMode.Append, FileAccess.Write, FileShare.None))
                    {
                        byte[] buffer = new byte[4096];
                        int bytesRead;
                        while ((bytesRead = await responseStream.ReadAsync(buffer, 0, buffer.Length)) > 0)
                        {
                            fileStream.Write(buffer, 0, bytesRead);
                            lock (item)
                            {
                                item.TotalBytesReceived += bytesRead;
                                Invoke(new Action(() => item.UpdateProgress(item.TotalBytesReceived, item.TotalFileSize)));
                            }
                        }
                    }
                }
            }
        }
    }

    private void CombineParts(DownloadItem item, int numberOfParts)
    {
        using (FileStream output = new FileStream(item.DownloadPath, FileMode.Create))
        {
                for (int i = 0; i < numberOfParts; i++)
            {
                    string tempFilePath = $"{item.DownloadPath}.part{i}";

                using (FileStream input = new FileStream(tempFilePath, FileMode.Open))
                {
                    input.CopyTo(output);
                }
                File.Delete(tempFilePath);
            }
        }
    }
    private void LogToFile(string url, string status)
    {
        // Check if the date has changed and update the log file path if necessary
        if (DateTime.Today != currentLogDate)
        {
            UpdateLogFilePath();
        }
        using (StreamWriter writer = new StreamWriter(currentLogFilePath, true))
        {
            writer.WriteLine($"{DateTime.Now}: {url} - {status}");
        }
    }
}
public class DownloadItem
{
    public string Url { get; private set; }
    public string DownloadPath { get; private set; }
    public TextProgressBar ProgressBar { get; private set; }
    public Label StatusLabel { get; private set; }
    public Label UrlLabel { get; private set; }
    public Panel Panel { get; private set; }
    public long TotalBytesReceived { get; set; }
    public long TotalFileSize { get; set; }
    public DownloadItem(string url, string folderPath)
    {
        Url = url;
        DownloadPath = Path.Combine(folderPath, Path.GetFileName(url));
        InitializeComponents();
    }
    private void InitializeComponents()
    {
        // Panel = new Panel { Width = 600, Height = 80 };
        // ProgressBar = new CustomProgressBar { Width = 500, Height = 20, Location = new System.Drawing.Point(0, 10), Url = Url };
        // StatusLabel = new Label { Width = 500, Location = new System.Drawing.Point(0, 35) };
        // // Add ProgressBar and StatusLabel to Panel
        // Panel.Controls.Add(ProgressBar);
        // Panel.Controls.Add(StatusLabel);
        Panel = new Panel { Width = 600, Height = 48 };
        // ProgressBar = new TextProgressBar { Width = 500, Height = 20, CustomText = "Text...", VisualMode = ProgressBarDisplayMode.CustomText, Location = new System.Drawing.Point(0, 15) };
        ProgressBar = new TextProgressBar { Width = 500, Height = 20, VisualMode = ProgressBarDisplayMode.Percentage, Location = new System.Drawing.Point(0, 15) };
        StatusLabel = new Label { Width = 500, Location = new System.Drawing.Point(0, 35) };
        UrlLabel = new Label { Text = Url, Width = 500, Location = new System.Drawing.Point(0, 0) };
        // Add ProgressBar and StatusLabel to Panel
        Panel.Controls.Add(ProgressBar);
        Panel.Controls.Add(StatusLabel);

        // Add URL Label to ProgressBar
        Panel.Controls.Add(UrlLabel);
    }
    public void UpdateProgress(long bytesReceived, long totalBytes)
    {
        ProgressBar.Maximum = (int)totalBytes;
        ProgressBar.Value = (int)bytesReceived;

        // StatusLabel.Text = $"{bytesReceived} / {totalBytes} bytes";
        // Update URL Label to display within ProgressBar
        UrlLabel.Text = Url;
    }
    public void UpdateStatus(string status)
    {
        StatusLabel.Text = status;
    }
}